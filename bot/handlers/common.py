from aiogram import types
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta
from moviepy.editor import VideoFileClip
from PIL import Image

import logging
import re
import os
import json
import uuid
import sqlite3
import requests
import threading
import hashlib
from urllib import parse
from urllib.parse import urlparse

import db
import utils as ut
import config
import keyboards as kb
from init import dp, log_error
from enums import AddContractStep


# –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ò–ù–ù
def validate_inn1(inn, juridical_type):
    inn = str(inn)

    if juridical_type in ['ip', 'physical']:
        if len(inn) != 12:
            return False
    elif juridical_type == 'juridical':
        if len(inn) != 10:
            return False

    if not re.match(r'^\d{10}$|^\d{12}$', inn):
        return False

    def check_control_digit(inn, coefficients):
        n = sum([int(a) * b for a, b in zip(inn, coefficients)]) % 11
        return n if n < 10 else n % 10

    if len(inn) == 10:
        coefficients = [2, 4, 10, 3, 5, 9, 4, 6, 8]
        return check_control_digit(inn[:-1], coefficients) == int(inn[-1])
    elif len(inn) == 12:
        coefficients1 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]
        coefficients2 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]
        return (check_control_digit(inn[:-1], coefficients1) == int(inn[-1]) and
                check_control_digit(inn[:-2], coefficients2) == int(inn[-2]))

    return False






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def delete_contractor(chat_id, contractor_id):
    db.query_db('DELETE FROM contractors WHERE chat_id = ? AND contractor_id = ?', (chat_id, contractor_id))






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ª—É–≥–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏



#### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ####
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—è



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É —Ä–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—è



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
async def del_platform(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    platform_name = db.query_db(
        'SELECT platform_name FROM platforms WHERE chat_id = ? AND ord_id = (SELECT MAX(ord_id) FROM platforms WHERE chat_id = ?)',
        (chat_id, chat_id), one=True)
    if platform_name:
        platform_name = platform_name[0]
        db.query_db('DELETE FROM platforms WHERE chat_id = ? AND platform_name = ?', (chat_id, platform_name))
        await message.answer(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

        # –ø–µ—Ä–µ–Ω—ë—Å
        # preloader_choose_platform(cb.message)
        await message.answer(
            chat_id,
            "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏?",
            reply_markup=kb.get_preloader_choose_platform_kb()
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")











### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ ####



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–ø–æ–∫ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞




    
    
####  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ ####
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ord_id
# async def get_creative_ord_id(campaign_ord_id, creative_count):
#     return f"{campaign_ord_id}.{creative_count + 1}"


# # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞
# async def add_creative_start(chat_id, campaign_id):
#     logging.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
#     msg = await message.answer(
#         chat_id,
#         "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–≤–æ–µ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. "
#         "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞."
#     )
#     dp.register_next_step(msg, lambda message: handle_creative_upload(message, campaign_id))



        
    



async def download_and_save_file(file_info, file_type, chat_id):
    downloaded_file = dp.download_file(file_info.file_path)
    file_extension = file_info.file_path.split('.')[-1]
    file_name = f"{file_type}_{chat_id}_{uuid.uuid4()}.{file_extension}"
    file_path = os.path.join("creatives", file_name)
    db.create_directory("creatives")
    with open(file_path, "wb") as new_file:
        new_file.write(downloaded_file)

    if file_type == 'video':
        clip = VideoFileClip(file_path)
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        resized_clip = clip.resize(newsize=(640, 360))
        resized_file_name = f"resized_{file_name}"
        resized_file_path = os.path.join("creatives", resized_file_name)
        resized_clip.write_videofile(resized_file_path, codec='libx264')
        file_path = resized_file_path

    elif file_type == 'photo':
        img = Image.open(file_path)
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        img = img.resize((640, 360), Image.LANCZOS)
        resized_file_name = f"resized_{file_name}"
        resized_file_path = os.path.join("creatives", resized_file_name)
        img.save(resized_file_path)
        file_path = resized_file_path

    return file_path


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞
# async def finalize_creative(chat_id, campaign_id):
    # creatives = db.query_db(
    #     'SELECT creative_id, content_type, content FROM creatives WHERE chat_id = ? AND campaign_id = ?',
    #     (chat_id, campaign_id))
    # media_ids = []
    # creative_data = []
    #
    # for creative in creatives:
    #     if creative[1] != 'text':
    #         media_id = register_media_file(creative[2], campaign_id, creative[1])
    #         media_ids.append(media_id)
    #     else:
    #         media_id = None
    #
    #     creative_data.append((creative[0], creative[2], media_id))
    #
    # description = db.query_db('SELECT service FROM ad_campaigns WHERE campaign_id = ?', (campaign_id,), one=True)[0]
    # contract = db.query_db('SELECT ord_id, contractor_id FROM contracts WHERE chat_id = ? ORDER BY ID DESC LIMIT 1',
    #                        (chat_id,), one=True)
    # if contract is None:
    #     await message.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    #     return
    #
    # contract_ord_id, contractor_id_part = contract
    #
    # # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ord_id –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    # contract_external_id = contract_ord_id
    #
    # user_inn = db.query_db('SELECT inn FROM users WHERE chat_id = ?', (chat_id,), one=True)
    # if user_inn is None:
    #     await message.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ò–ù–ù –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    #     return
    # user_inn = user_inn[0]
    #
    # user_role = db.query_db('SELECT role FROM users WHERE chat_id = ?', (chat_id,), one=True)[0]
    #
    # if user_role == "advertiser":
    #     user_info = db.query_db('SELECT fio, inn FROM users WHERE chat_id = ?', (chat_id,), one=True)
    #     fio_or_title = user_info[0]
    #     user_inn = user_info[1]
    # else:
    #     contractor_info = db.query_db('SELECT fio, title, inn FROM contractors WHERE contractor_id = ?',
    #                                   (int(contractor_id_part),), one=True)
    #     # –ß—Ç–æ–± –Ω–µ –≤–∏—Å –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω contractor_info
    #     fio_or_title = '–Ω.–¥.'
    #     if contractor_info:
    #         fio_or_title = contractor_info[0] if contractor_info[0] else contractor_info[1]
    #     user_inn = contractor_info[2] if contractor_info else '–Ω.–¥.'
    #
    # # –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 707. –ï—Å–ª–∏ creative_data –ø—É—Å—Ç–∞—è, —Ç–æ –≤ INSERT INTO statistics –¥–æ–±–∞–≤–ª—è–µ–º None
    # creative_id = None
    # # –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 700. –¢–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ–± –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ marker –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    # marker = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    # for creative_id, _, _ in creative_data:
    #     response = send_creative_to_ord(chat_id, campaign_id, creatives, description, media_ids, contract_external_id,
    #                                     user_inn)
    #     if response is None or 'marker' not in response:
    #         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ –û–†–î.")
    #         return
    #
    #     marker = response['marker']
    #     db.query_db('UPDATE creatives SET token = ?, status = ? WHERE creative_id = ?', (marker, 'active', creative_id))
    #
    #     # –ø–æ—Å—Ç–≥—Ä–µ
    #     db.insert_creative_links_data(chat_id, contract_external_id, creative_id, marker)
    #     # —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    #     # db.query_db('INSERT OR REPLACE INTO creative_links (chat_id, ord_id, creative_id, token) VALUES (?, ?, ?, ?)',
    #     #             (chat_id, contract_external_id, creative_id, marker))
    #
    # await message.answer(chat_id,
    #                  f"–ö—Ä–µ–∞—Ç–∏–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à —Ç–æ–∫–µ–Ω - {marker}.\n"
    #                  f"–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µüëá\n\n"
    #                  f"`–†–µ–∫–ª–∞–º–∞. {fio_or_title}. –ò–ù–ù: {user_inn}. erid: {marker}`",
    #                 parse_mode="MARKDOWN")
    # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É statistics
    # date_start_actual = datetime.now().strftime('%Y-%m-%d')
    # db.query_db('INSERT INTO statistics (chat_id, campaign_id, creative_id, date_start_actual) VALUES (?, ?, ?, ?)',
    #             (chat_id, campaign_id, creative_id, date_start_actual))
    #
    # # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
    # ask_for_creative_link(chat_id, contract_external_id)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
async def ask_for_creative_link(chat_id, ord_id):
    msg = await message.answer(
        text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –∫ –≤–∞—à–µ–º—É –∫—Ä–µ–∞—Ç–∏–≤—É, –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. "
             "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –º–æ–∂–µ—Ç –∫–∞–∫ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å, —Ç–∞–∫ –∏ —Ä–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å. "
             "–ï—Å–ª–∏ –≤—ã –ø—É–±–ª–∏–∫—É–µ—Ç–µ –æ–¥–∏–Ω –∫—Ä–µ–∞—Ç–∏–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö - –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∂–¥—É—é –ø–ª–æ—â–∞–¥–∫—É."
    )
    dp.register_next_step(msg, lambda message: handle_creative_link(message, ord_id))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    # threading.Timer(3600, check_and_remind_link, [chat_id, ord_id]).start()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
async def handle_creative_link(message, ord_id):
    chat_id = message.chat.id
    link = message.text
    creative_id = db.query_db(
        'SELECT creative_id FROM creative_links WHERE chat_id = ? AND ord_id = ? ORDER BY ID DESC LIMIT 1',
        (chat_id, ord_id), one=True)
    if creative_id is None:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω creative_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.")
        return
    creative_id = creative_id[0]
    db.query_db('UPDATE creative_links SET link = ? WHERE chat_id = ? AND ord_id = ? AND creative_id = ?',
                (link, chat_id, ord_id, creative_id))
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤.")

    await message.answer(
        chat_id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å?",
        reply_markup=kb.get_handle_creative_link_kb(ord_id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
async def check_and_remind_link(chat_id, ord_id):
    if not db.query_db('SELECT * FROM creative_links WHERE chat_id = ? AND ord_id = ? AND link IS NOT NULL',
                       (chat_id, ord_id)):
        remind_link(chat_id)


async def remind_link(chat_id):
    await message.answer(
        chat_id,
        "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω, –Ω–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫—Ä–µ–∞—Ç–∏–≤. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É. "
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –û–†–î.",
        reply_markup=kb.generate_link_markup()
    )


### –ë–ª–æ–∫ –ø–æ–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ###
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–∞—á–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def send_statistics_reminder(chat_id):
    await message.answer(
        chat_id,
        "–°–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –∫—Ä–µ–∞—Ç–∏–≤–∞–º. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_data_from_db(campaign_id):
    data = db.query_db('''
          SELECT a.brand, a.service, t.link 
          FROM ad_campaigns a
          JOIN target_links t ON a.campaign_id = t.campaign_id
          WHERE a.campaign_id = ?
          ''', (campaign_id,))
    logging.debug(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¥–ª—è campaign_id {campaign_id}: {data}")
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def create_message_text(campaign_id):
    data = db.query_db(
        'SELECT a.brand, a.service, t.link '
        'FROM ad_campaigns a '
        'JOIN target_links t ON a.campaign_id = t.campaign_id '
        'WHERE a.campaign_id = ?',
        (campaign_id,),
        one=True
    )

    if not data:
        logging.debug(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è campaign_id {campaign_id}")
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None

    brand, service, link = data
    message_text = (f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è –ø–æ–¥–∞—á–∏:\n"
                    f"–ë—Ä–µ–Ω–¥ - {brand}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ - {service}\n"
                    f"<a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤</a>")

    kb = InlineKeyboardBuilder()
    kb.row(
        kb.button(text="‚óÄ", callback_data='back'),
        kb.button(text="‚ñ∂", callback_data='forward')
    )
    kb.row(
        kb.button(text="–í—ã–±—Ä–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤", callback_data=f'select_{campaign_id}')
    )

    return message_text, markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_total_creatives(user_id):
    count = db.query_db('SELECT COUNT(*) FROM ad_campaigns WHERE chat_id = ?', (user_id,), one=True)
    logging.debug(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è user_id {user_id}: {count}")
    return count[0] if count else 0


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑–æ–≤
# @bot.message(lambda message: True)
async def handle_statistics_input(message):
    if not message.text.isdigit():
        await message.answer(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        dp.register_next_step(message, handle_statistics_input)
        return

    user_id = message.from_user.id
    campaign_id = user_state.get(str(user_id) + "_selected")
    if not campaign_id:
        await message.answer(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é.")
        return

    views = int(message.text)

    data = get_data_from_db(campaign_id)
    if data:
        brand, description, link = data[0]  # —Ç–∞–∫ –∫–∞–∫ get_data_from_db –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
        platform_url = link  # –∑–∞–º–µ–Ω–∏–º platform_url –Ω–∞ link

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user_state[str(user_id) + "_data"] = {
            'views': views,
            'brand': brand,
            'description': description,
            'platform_url': platform_url
        }

        await message.answer(message.chat.id, "–í—ã –ø–æ–¥–∞–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—Ä–µ–∞—Ç–∏–≤—É:\n"
                                          f"–ë—Ä–µ–Ω–¥ - {brand}\n"
                                          f"–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ - {description}\n"
                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ - {platform_url}\n"
                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}\n"
                                          "–í—Å—ë –≤–µ—Ä–Ω–æ?",
                        reply_markup=confirm_markup())
    else:
        await message.answer(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞.")


# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def confirm_markup():
    kb = InlineKeyboardBuilder()
    kb.row(
        kb.button(text="–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='confirm_yes'),
        kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data='confirm_no')
    )
    return kb.adjust(1).as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –û–†–î
async def send_statistics_to_ord(chat_id):
    logging.debug(f"–ù–∞—á–∞–ª–æ send_statistics_to_ord –¥–ª—è chat_id: {chat_id}")
    user_data = user_state.get(str(chat_id) + "_data")
    logging.debug(f"user_data: {user_data}")
    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –û–†–î.")
        return

    campaign_id = user_state.get(str(chat_id) + "_selected")
    logging.debug(f"campaign_id: {campaign_id}")
    views = user_data['views']
    platform_url = user_data['platform_url']
    date_submitted = datetime.now()

    creative_id = db.query_db('SELECT creative_id FROM creatives WHERE campaign_id = ?', (campaign_id,), one=True)
    logging.debug(f"creative_id: {creative_id}")
    if not creative_id:
        await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å creative_id –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞ {campaign_id}.")
        return

    creative_id = creative_id[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è pad_external_id
    pad_check_response = requests.get(f'https://api-sandbox.ord.vk.com/v1/pads/{campaign_id}', headers={
        "Authorization": "Bearer 633962f71ade453f997d179af22e2532"
    })

    if pad_check_response.status_code != 200:
        await message.answer(f"–û—à–∏–±–∫–∞: pad_external_id {campaign_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –û–†–î.")
        return

    date_start_actual = db.query_db(
        'SELECT date_start_actual FROM statistics WHERE campaign_id = ? AND creative_id = ? ORDER BY date_start_actual LIMIT 1',
        (campaign_id, creative_id), one=True)[0]

    items = [{
        "creative_external_id": creative_id,
        "pad_external_id": campaign_id,
        "shows_count": views,
        "date_start_actual": date_start_actual,
        "date_end_actual": datetime.now().strftime('%Y-%m-%d')
    }]

    data = {
        "items": items
    }

    headers = {
        "Authorization": "Bearer 633962f71ade453f997d179af22e2532",
        "Content-Type": "application/json"
    }

    logging.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –û–†–î: %s", json.dumps(data, indent=4))

    response = requests.post('https://api-sandbox.ord.vk.com/v1/statistics', headers=headers, json=data)

    logging.debug("–û—Ç–≤–µ—Ç –û–†–î: %s", response.text)

    if response.status_code in [200, 201]:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –û–†–î.")
        logging.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –û–†–î –¥–ª—è chat_id: {chat_id}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä–µ–∞—Ç–∏–≤—É
        current_index = user_state.get(str(chat_id) + "_current", 0)
        user_state[str(chat_id) + "_current"] = current_index + 1
        total_creatives = get_total_creatives(chat_id)
        logging.debug(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}, –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤: {total_creatives}")
        if user_state[str(chat_id) + "_current"] < total_creatives:
            current_campaign_id = user_state[chat_id][user_state[str(chat_id) + "_current"]]
            message_text, markup = create_message_text(current_campaign_id)
            await message.answer(message_text, reply_markup=markup, parse_mode='HTML')
        else:
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –∫—Ä–µ–∞—Ç–∏–≤–∞–º.")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –û–†–î: {response.text}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
async def auto_submit_statistics():
    now = datetime.now()
    next_month = now.month + 1 if now.month < 12 else 1
    next_year = now.year + 1 if next_month == 1 else now.year
    end_of_month = datetime(next_year, next_month, 1) - timedelta(days=1)
    auto_submit_time = end_of_month - timedelta(days=1)

    threading.Timer((auto_submit_time - now).total_seconds(), auto_submit_statistics_for_all).start()


async def auto_submit_statistics_for_all():
    users = db.query_db('SELECT DISTINCT chat_id FROM creatives')
    for user in users:
        chat_id = user[0]
        statistics = db.query_db('SELECT * FROM statistics WHERE chat_id = ?', (chat_id,))
        if not statistics:
            send_statistics_reminder(chat_id)
            submit_statistics_auto(chat_id)


async def submit_statistics_auto(chat_id):
    active_creatives = db.query_db('SELECT campaign_id, creative_id FROM creatives WHERE chat_id = ?', (chat_id,))
    for campaign_id, creative_id in active_creatives:
        platform_url = db.query_db('SELECT link FROM creative_links WHERE chat_id = ? AND creative_id = ?',
                                   (chat_id, creative_id), one=True)
        if not platform_url:
            continue

        platform_url = platform_url[0]
        average_views = db.query_db('SELECT average_views FROM platforms WHERE chat_id = ?', (chat_id,), one=True)
        if not average_views:
            continue

        average_views = average_views[0]
        db.query_db(
            'INSERT INTO statistics (chat_id, campaign_id, creative_id, platform_url, views, date_submitted) VALUES (?, ?, ?, ?, ?, ?)',
            (chat_id, campaign_id, creative_id, platform_url, average_views, datetime.now()))
    send_statistics_to_ord(chat_id)


### –û–ø–ª–∞—Ç–∞ ###

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
async def calculate_signature(*args) -> str:
    return hashlib.md5(':'.join(str(arg) for arg in args).encode()).hexdigest()


# –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
async def parse_response(request: str) -> dict:
    params = {}
    for item in urlparse(request).query.split('&'):
        key, value = item.split('=')
        params[key] = value
    return params


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def check_signature_result(order_number: int, received_sum: float, received_signature: str, password: str) -> bool:
    signature = calculate_signature(received_sum, order_number, password)
    return signature.lower() == received_signature.lower()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
async def generate_payment_link(merchant_login: str, merchant_password_1: str, cost: float, number: int, description: str,
                          robokassa_payment_url='https://auth.robokassa.ru/Merchant/Index.aspx') -> str:
    signature = calculate_signature(merchant_login, cost, number, merchant_password_1)
    data = {
        'MerchantLogin': merchant_login,
        'OutSum': cost,
        'InvoiceID': number,
        'Description': description,
        'SignatureValue': signature
    }
    return f'{robokassa_payment_url}?{parse.urlencode(data)}'


# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (ResultURL)
async def result_payment(merchant_password_2: str, request: str) -> str:
    param_request = parse_response(request)
    cost = float(param_request['OutSum'])
    number = int(param_request['InvoiceID'])
    signature = param_request['SignatureValue']

    if check_signature_result(number, cost, signature, merchant_password_2):
        return f'OK{param_request["InvoiceID"]}'
    return "bad sign"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (SuccessURL)
async def check_success_payment(merchant_password_1: str, request: str) -> str:
    param_request = parse_response(request)
    cost = float(param_request['OutSum'])
    number = int(param_request['InvoiceID'])
    signature = param_request['SignatureValue']

    if check_signature_result(number, cost, signature, merchant_password_1):
        return "Thank you for using our service"
    return "bad sign"


async def process_amount(message):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("Amount must be greater than 0")
        chat_id = message.chat.id
        inv_id = ut.get_next_inv_id(chat_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ inv_id
        description = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã || NP"

        payment_link = generate_payment_link(config.mrh_login, config.mrh_pass1, amount, inv_id, description)

        # —Å–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ query_db
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # conn = sqlite3.connect('bot_database2.db')
        # cursor = conn.cursor()
        # cursor.execute('INSERT INTO payments (chat_id, inv_id, amount, status) VALUES (?, ?, ?, ?)',
        #                (chat_id, inv_id, amount, 'pending'))
        # conn.commit()
        # conn.close()
        db.query_db('INSERT INTO payments (chat_id, inv_id, amount, status) VALUES (?, ?, ?, ?)',
                             (chat_id, inv_id, amount, 'pending'))

        # kb = InlineKeyboardBuilder()
        # button = kb.button(text=text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)
        # # button)
        # await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=markup)

    except ValueError as e:
        await message.answer(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
