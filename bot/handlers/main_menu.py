from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

import db
import data as dt
import keyboards as kb
import utils as ut
from config import Config
from init import dp, log_error, bot
from .base import preloader_choose_platform, preloader_advertiser_entity
from utils import ord_api
from enums import CB, JStatus, UserState


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart)
async def start(msg: Message, state: FSMContext):
    user = await db.get_user_info(msg.from_user.id)
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        display_name = user.fio if user.j_type != 'juridical' else user.title
        name_label = "–§–ò–û" if user.j_type != 'juridical' else "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"

        text = (f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\n"
                f"{name_label}: <b>{display_name}</b>\n"
                f"–ò–ù–ù: <b>{user.inn}</b>\n"
                f"–ü—Ä–∞–≤–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å: <b>{dt.juridical_type_map.get(user.j_type, user.j_type)}</b>\n"
                f"–ë–∞–ª–∞–Ω—Å: <b>{user.balance} —Ä—É–±–ª–µ–π</b>\n"
                f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{dt.role_map.get(user.role, user.role)}</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–æ–ª—å.\n\n"
                "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n\n")
        await msg.answer(text, reply_markup=kb.get_start_kb())

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π
        await msg.answer(dt.start_text, reply_markup=kb.get_agree_button())


# —Ç–∏–ø–∞ –∫–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–æ–¥–µ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω"
@dp.callback_query(lambda cb: cb.data == CB.AGREE.value)
async def agree(cb: CallbackQuery):
    user = await db.get_user_info(cb.from_user.id)
    if not user:
        await cb.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!')
    else:
        await cb.answer('–í—ã —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å.')

    await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∞–≤–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å", reply_markup=kb.get_register_kb())
        
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(lambda cb: cb.data.startswith(CB.CONFIRM_USER.value))
async def confirmation(cb: CallbackQuery):
    if cb.data.startswith(CB.CONFIRM_USER.value) == CB.CONFIRM_USER:
        await cb.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
@dp.callback_query(lambda cb: cb.data.startswith(CB.CHANGE_ROLE.value))
async def select_role(cb: CallbackQuery):
    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å
    await cb.message.answer(
        text=("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:\n"
              "–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É.\n"
              "–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ "
              "–∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ —É—Å–ª—É–≥–µ.")
    )
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=kb.get_process_role_change_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query(lambda cb: cb.data in [CB.IP.value, CB.JURIDICAL.value, CB.PHYSICAL.value])
async def collect_info(cb: CallbackQuery, state: FSMContext):
    juridical_type = cb.data

    await db.update_user(user_id=cb.from_user.id, j_type=juridical_type)

    if juridical_type == JStatus.IP:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.")

    elif juridical_type == JStatus.JURIDICAL:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –û–û–û –Æ–ö–¶ –ü–∞—Ä—Ç–Ω–µ—Ä.")

    elif juridical_type == JStatus.PHYSICAL:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.")

    await state.set_state(UserState.USER_ADD_NAME)
    await state.update_data(data={'j_type': juridical_type})


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è
@dp.message(StateFilter(UserState.USER_ADD_NAME))
async def add_fio(msg: Message, state: FSMContext):
    data = await state.get_data()
    await state.set_state(UserState.USER_ADD_INN)
    await state.update_data(data={'name': msg.text})

    if data['j_type'] == JStatus.IP:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù. \n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä, 563565286576. –ò–ù–ù –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ò–ù–ù —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞.")
    elif data['j_type'] == JStatus.JURIDICAL:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù. –ù–∞–ø—Ä–∏–º–µ—Ä, 563565286576.")

    elif data['j_type'] == JStatus.PHYSICAL:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, 6141027912.")


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ò–ù–ù
@dp.message(StateFilter(UserState.USER_ADD_INN))
async def add_inn(msg: Message, state: FSMContext):
    data = await state.get_data()

    if not ut.is_valid_inn(msg.text, data['j_type']):
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
        return

    await state.set_state(UserState.USER_ADD_INN)
    await state.update_data(data={'role': int(msg.text)})

    await msg.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:\n"
             "–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É.\n"
             "–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö, "
             "—á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ —É—Å–ª—É–≥–µ.\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å",
        reply_markup=kb.get_select_role_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@dp.callback_query(lambda cb: cb.data in ['advertiser', 'publisher'])
async def collect_role(cb: CallbackQuery, state: FSMContext):
    _, role = cb.data.split(':')

    data = await state.get_data()
    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º rs_url —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏ –ò–ü
    rs_url = "https://example.com" if data['j_type'] == JStatus.JURIDICAL else None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –û–†–î
    response = await ord_api.send_to_ord(
        user_id=cb.from_user.id,
        name=data['name'],
        role=role,
        j_type=data['j_type'],
        inn=data['inn'],
        rs_url=rs_url
    )

    if response in [200, 201]:
        await cb.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ")
        await db.add_user(
            user_id=cb.from_user.id,
            full_name=cb.from_user.full_name,
            username=cb.from_user.username,
            role=role,
            inn=data['inn'],
            name=data['name'],
            j_type=data['j_type']
        )

        # handle_ord_response –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç—É—Ç. –í–∑—è–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        if role == 'advertiser':
            # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ preloader_advertiser_entity
            pass
        elif role == 'publisher':
            # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ preloader_choose_platform
            pass
    else:
        await cb.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –û–†–î\n\n"
                                "–ù–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú–æ–ª –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


# –ø–∏—à–µ—Ç —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@dp.callback_query(lambda cb: cb.data == 'in_dev')
async def in_dev(cb: CallbackQuery):
    dp.answer_callback_query(cb.id, 'üõ† –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†', show_alert=True)


# –ø–∏—à–µ—Ç —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@dp.callback_query(lambda cb: cb.data == CB.CLOSE.value)
async def close(cb: CallbackQuery, state: FSMContext):
    await state.clear()
#     —Ç—É—Ç –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
