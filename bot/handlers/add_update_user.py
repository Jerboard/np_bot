from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums.message_entity_type import MessageEntityType
from datetime import datetime

import db
import data as dt
import keyboards as kb
import utils as ut
from config import Config
from init import dp, log_error, bot
from .base import preloader_choose_platform, start_bot, preloader_advertiser_entity
from utils import ord_api
from enums import CB, JStatus, UserState, Role, Step


# –°–æ–≥–ª–∞—Å–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query(lambda cb: cb.data == CB.AGREE.value)
async def agree(cb: CallbackQuery):
    await cb.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!')
    await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∞–≤–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å", reply_markup=kb.get_register_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(lambda cb: cb.data.startswith(CB.CONFIRM_USER.value))
async def confirmation(cb: CallbackQuery):
    await cb.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
@dp.callback_query(lambda cb: cb.data.startswith(CB.CHANGE_ROLE.value))
async def select_role(cb: CallbackQuery):
    await cb.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:\n\n"
             "<b>–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É.\n"
             "<b>–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö, "
             "—á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ —É—Å–ª—É–≥–µ.\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å",
        reply_markup=kb.get_select_role_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query(lambda cb: cb.data.startswith(CB.RED_J_TYPE.value))
async def collect_info(cb: CallbackQuery, state: FSMContext):
    _, juridical_type = cb.data.split(':')

    if juridical_type == JStatus.IP:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.")

    elif juridical_type == JStatus.JURIDICAL:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –û–û–û –Æ–ö–¶ –ü–∞—Ä—Ç–Ω–µ—Ä.")

    elif juridical_type == JStatus.PHYSICAL:
        await cb.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.")

    await state.set_state(UserState.USER_ADD_NAME)
    await state.update_data(data={'j_type': juridical_type, 'step': Step.NAME.value})


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è
@dp.message(StateFilter(UserState.USER_ADD_NAME))
async def add_fio(msg: Message, state: FSMContext):
    data = await state.get_data()

    if data['j_type'] == JStatus.JURIDICAL and data['step'] == Step.NAME:
        await state.update_data(data={'name': msg.text, 'step': Step.FIO.value})
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞")
        return

    elif data['j_type'] == JStatus.JURIDICAL and data['step'] == Step.FIO:
        await state.update_data(data={'fio': msg.text, 'step': Step.INN.value})

    else:
        await state.update_data(data={'name': msg.text, 'step': Step.INN.value})

    await state.set_state(UserState.USER_ADD_INN)

    if data['j_type'] == JStatus.IP:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù. \n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä, 563565286576. –ò–ù–ù –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ò–ù–ù —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞.")
    elif data['j_type'] == JStatus.PHYSICAL:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù. \n–ù–∞–ø—Ä–∏–º–µ—Ä, 563565286576.")

    elif data['j_type'] == JStatus.JURIDICAL:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä, 6141027912.")


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ò–ù–ù
@dp.message(StateFilter(UserState.USER_ADD_INN))
async def add_inn(msg: Message, state: FSMContext):
    data = await state.get_data()

    if data['step'] == Step.INN:
        if not ut.validate_inn(msg.text, j_type=data['j_type']):
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            return

        await state.update_data(data={'inn': msg.text, 'step': Step.PHONE.value})
        if data['j_type'] == JStatus.JURIDICAL:
            text = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞'

        else:
            text = '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'

        await msg.answer(text=text)

    elif data['step'] == Step.PHONE:
        await state.update_data(data={'phone': msg.text, 'step': Step.EMAIL.value})
        await msg.answer(
            text='–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n'
                 '–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
            # reply_markup=kb.get_continue_btn_kb()
        )

    else:
        if msg.entities and msg.entities[0].type == MessageEntityType.EMAIL:
            await state.update_data(data={'email': msg.text})

            await msg.answer(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:\n\n"
                     "<b>–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É.\n"
                     "<b>–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö, "
                     "—á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ —É—Å–ª—É–≥–µ.\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å",
                reply_markup=kb.get_select_role_kb()
            )

        else:
            await msg.answer(text=f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n'
                                  f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n'
                                  f'–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏')


# –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
# @dp.callback_query(lambda cb: cb.data.startswith(CB.USER_CONTINUE.value))
# async def collect_role(cb: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#
#     if data['step'] == Step.PHONE:
#         await state.update_data(data={'step': Step.EMAIL.value})
#         await cb.message.answer(
#             text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n'
#                  '–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
#             reply_markup=kb.get_continue_btn_kb()
#         )
#
#     else:
#         await cb.message.answer(
#             text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:\n\n"
#                  "<b>–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É.\n"
#                  "<b>–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö, "
#                  "—á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ —É—Å–ª—É–≥–µ.\n\n"
#                  "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å",
#             reply_markup=kb.get_select_role_kb()
#         )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ CB.USER_SELECT_ROLE.value
@dp.callback_query(lambda cb: cb.data.startswith(CB.USER_SELECT_ROLE.value))
async def collect_role(cb: CallbackQuery, state: FSMContext):
    _, role = cb.data.split(':')

    data = await state.get_data()
    await state.clear()

    # for k, v in data.items():
    #     print(f'{k}: {v}')

    if not data:
        is_update = True

        text = f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {dt.role_map.get(role)}"
        user_info = await db.get_user_info(cb.from_user.id)
        name = user_info.name
        j_type = user_info.j_type
        inn = user_info.inn
    else:
        is_update = False

        text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòâ"
        name = data['name']
        j_type = data['j_type']
        inn = data['inn']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –û–†–î
    response = await ord_api.send_user_to_ord(
        ord_id=cb.from_user.id,
        name=name,
        role=role,
        j_type=j_type,
        inn=inn
    )

    if response in [200, 201]:
        await cb.message.answer(text)

        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        ord_id = f'{Config.partner_data["inn"]}-m-{cb.from_user.id}'
        date_str = datetime.now().strftime(Config.ord_date_form)
        await ut.send_contract_to_ord(
            ord_id=ord_id,
            client_external_id='my',
            contractor_external_id=str(cb.from_user.id),
            contract_date=date_str,
            serial=str(cb.from_user.id)
        )

        if is_update:
            await db.update_user(user_id=cb.from_user.id, role=role)

        else:
            # —Ç—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
            # ord_id = f'{Config.partner_data["inn"]}-m-{cb.from_user.id}'
            # await ut.send_mediation_to_ord(ord_id=ord_id, client_ord_id=str(cb.from_user.id))

            await db.update_user(
                user_id=cb.from_user.id,
                role=role,
                inn=data['inn'],
                name=data['name'],
                j_type=data['j_type'],
                phone=data.get('phone'),
                email=data.get('email'),
                fio=data.get('fio'),
                in_ord=True
            )

        if role == Role.ADVERTISER:
            await preloader_advertiser_entity(cb.message)

        elif role == Role.PUBLISHER:
            await preloader_choose_platform(cb.message)

    else:
        await cb.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Ä–¥", reply_markup=kb.get_help_button())
