from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command as CommandFilter, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
from asyncio import sleep

import db
import keyboards as kb
from config import Config
from init import dp, log_error
import utils as ut
from .base import start_campaign_base, add_creative_start, start_bot
from enums import CB, Command, UserState, JStatus, Role, Delimiter


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_creative
@dp.message(CommandFilter(Command.ADD_CREATIVE.value), StateFilter('*'))
async def add_creative(msg: Message, state: FSMContext):
    user = await db.get_user_info(msg.from_user.id)
    if not user:
        await start_bot(msg, state)

    campaigns = await db.get_user_campaigns(msg.from_user.id)
    if not campaigns:
        await msg.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä–µ–∞—Ç–∏–≤–∞."
        )
        await start_campaign_base(msg, state)

    else:
        await msg.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞:",
            reply_markup=kb.get_add_creative_kb(campaigns)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ CREATIVE_SELECT_CAMPAIGN
@dp.callback_query(lambda cb: cb.data.startswith(CB.CREATIVE_SELECT_CAMPAIGN.value))
async def choose_campaign_callback(cb: CallbackQuery, state: FSMContext):
    _, campaign_id = cb.data.split(':')
    await add_creative_start(msg=cb.message, campaign_id=campaign_id, state=state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞
@dp.message(StateFilter(UserState.ADD_CREATIVE))
async def handle_creative_upload(msg: Message, state: FSMContext):
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
    if msg.content_type in ['text', 'photo', 'video', 'audio', 'document']:
        data = await state.get_data()

        creative = {
            'content_type': msg.content_type,
            'file_id': ut.get_file_id(msg),
            'text': msg.text
        }

        creatives = data.get('creatives', [])
        creatives.append(creative)
        await state.update_data(data={'creatives': creatives})

        # creative_content = save_creative(msg)
        # creative_count = db.query_db('SELECT COUNT(*) FROM creatives WHERE chat_id = ? AND campaign_id = ?',
        #                              (chat_id, campaign_id), one=True)
        # if creative_count is None:
        #     creative_count = [0]

        # campaign_data = await db.get_campaign(data['campaign_id'])

        # if ord_id_data is None:
        #     await msg.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ord_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.")
        #     return

        # ord_id = ut.get_ord_id(msg.from_user.id, delimiter=Delimiter.C.value)

        await msg.answer(
            "–ö—Ä–µ–∞—Ç–∏–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞?",
            reply_markup=kb.get_handle_creative_upload_kb(campaign_id)
        )
    else:
        sent = await msg.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤.")
        await sleep(3)
        await sent.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç"
@dp.callback_query(lambda cb: cb.data.startswith(CB.CREATIVE_ADD_CREATIVE.value))
async def add_more_creative(cb: CallbackQuery):
    await cb.answer('üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞', show_alert=True)


# —Å–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.callback_query(lambda cb: cb.data.startswith('pay_yk'))
async def pay_yk(cb: CallbackQuery, state: FSMContext):
    _, campaign_id = cb.data.split(':')
    # –∏—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã
    sent = await cb.message.answer('‚è≥')
    save_cards = await db.get_user_save_cards(cb.from_user.id)

    pay_id = ut.create_pay_link(campaign_id)
    await sent.delete()
    await cb.message.answer(
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É',
        reply_markup=kb.get_yk_pay_kb(pay_id, save_cards)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@dp.callback_query(lambda cb: cb.data.startswith('continue_creative_'))
async def choose_campaign(cb: CallbackQuery, state: FSMContext):
    _, pay_id = cb.data.split(':')

    sent = await cb.message.answer('‚è≥')
    pay_data = ut.check_pay_yoo(pay_id)

    log_error(pay_data, wt=False)
    if pay_data:
        card_info, campaign_id = pay_data

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        await db.add_payment(
            user_id=cb.from_user.id,
            pay_id=pay_id,
            card=card_info,
            save_card=False
        )

        data = await state.get_data()
        creatives = data.get('creatives', [])

        campaign = await db.get_campaign(data['campaign_id'])
        contract = await db.get_contract(campaign.contract_id)
        user = await db.get_user_info(cb.from_user.id)

        contract_ord_id = contract.ord_id
        contractor_id_part = contract.contractor_id

        # contract_ord_id, contractor_id_part = contract

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ord_id –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract_external_id = contract_ord_id

        if user.role == Role.ADVERTISER:
            fio_or_title = user.name
            user_inn = user.inn
        else:
            contractor_info = await db.get_contractor(contract.contractor_id)

            fio_or_title = contractor_info.name
            user_inn = contractor_info.inn

        media_ids = []
        creative_data = []
        creative_text = ''
        for creative in creatives:
            # {'content_type': msg.content_type, 'file_id': ut.get_file_id(msg), 'text': msg.text}

            file_id = creative.get('file_id')
            if file_id:
                # —Ç—É—Ç –º–µ–¥–∏–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ –û–†–î
                file_path = await ut.save_media(file_id=file_id, user_id=cb.from_user.id)
                media_id = await ut.register_media_file(file_path, campaign_id, campaign.service)
                media_ids.append(media_id)
            else:
                creative_text += f'{creative.text}\n\n'
                file_path = None
                media_id = None

            # await db.add_creative(
            #     user_id=cb.from_user.id,
            #     campaign_id=campaign.id,
            #     content_type=creative['content_type'],
            #     text=creative.get('text'),
            #     file_id=file_id,
            #     file_path=file_path
            # )
            # creative_data.append((creative[0], creative[2], creative))

        # for creative_id, _, _ in creative_data:
        # —Ç—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤–µ—Å—å –≤–µ—Å—å –∫—Ä–µ–∞—Ç–∏–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ–¥–∏–∞
            response = await ut.send_creative_to_ord(
                creative_id='',
                brand=campaign.brand,
                creative_name=f'{fio_or_title}',
                creative_text=creative_text.strip(),
                description=campaign.service,
                media_ids=media_id,
                contract_ord_id=contract.ord_id
            )
            log_error(f'response: {response}')
            if response is None or 'marker' not in response:
                await cb.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ –û–†–î.")
                # —Ç—É—Ç –µ—â—ë –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥
                return

            marker = response['marker']
            await db.add_creative(
                user_id=cb.from_user.id,
                campaign_id=campaign.id,
                content_type=creative['content_type'],
                text=creative.get('text'),
                file_id=file_id,
                file_path=file_path,
                token=marker
            )

        await cb.message.answer(
            text=f"–ö—Ä–µ–∞—Ç–∏–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à —Ç–æ–∫–µ–Ω - {marker}.\n"
                 f"–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µüëá\n\n"
                 f"–†–µ–∫–ª–∞–º–∞. {fio_or_title}. –ò–ù–ù: {user_inn}. erid: {marker}`")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É statistics
        # date_start_actual = datetime.now().strftime('%Y-%m-%d')
        # db.query_db('INSERT INTO statistics (chat_id, campaign_id, creative_id, date_start_actual) VALUES (?, ?, ?, ?)',
        #             (chat_id, campaign_id, creative_id, date_start_actual))

        # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
        # ask_for_creative_link(chat_id, contract_external_id)

    else:
        await cb.answer('‚ùóÔ∏è  –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂', show_alert=True)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤
@dp.callback_query(lambda cb: cb.data.startswith('add_link_'))
async def add_link(cb: CallbackQuery):
    ord_id = cb.data.split('_')[2]
    msg = await cb.message.answer(
        "–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤–∞—à –∫—Ä–µ–∞—Ç–∏–≤ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. –ï—Å–ª–∏ –≤—ã –ø—É–±–ª–∏–∫—É–µ—Ç–µ –æ–¥–∏–Ω –∫—Ä–µ–∞—Ç–∏–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö - "
        "–ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∂–¥—É—é –ø–ª–æ—â–∞–¥–∫—É.")
    # dp.register_next_step(msg, lambda message: cf.handle_creative_link(message, ord_id))


@dp.callback_query(lambda cb: cb.data.startswith('link_done_'))
async def link_done(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    await cb.message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤. "
        "–ü–æ–¥–∞—Ç—å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –ø–æ–∫–∞–∑–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –∏–ª–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. "
        "–í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –º—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ –ø–æ–¥–∞—á–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.")
