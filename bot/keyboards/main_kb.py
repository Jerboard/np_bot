from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

import db
from config import Config
from init import log_error
from enums import CB, Role, JStatus, Platform, Action


def get_agree_button() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–Ø —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data=CB.AGREE.value)
    return kb.adjust(1).as_markup()


# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_start_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=CB.CONFIRM_USER.value)
    kb.button(text='–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', callback_data=CB.CHANGE_ROLE.value)
    kb.adjust(1).as_markup()
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è  register
def get_register_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ò–ü', callback_data=f'{CB.RED_J_TYPE.value}:{JStatus.IP.value}')
    kb.button(text='–Æ—Ä. –ª–∏—Ü–æ', callback_data=f'{CB.RED_J_TYPE.value}:{JStatus.JURIDICAL.value}')
    kb.button(text='–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ', callback_data=f'{CB.RED_J_TYPE.value}:{JStatus.PHYSICAL.value}')
    return kb.adjust(2).as_markup()


# –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def get_continue_btn_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'{CB.USER_CONTINUE.value}')
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è  inn_collector
def get_select_role_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å', callback_data=f'{CB.USER_SELECT_ROLE.value}:{Role.ADVERTISER.value}')
    kb.button(text='–†–µ–∫–ª–∞–º–æ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å', callback_data=f'{CB.USER_SELECT_ROLE.value}:{Role.PUBLISHER.value}')
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è  preloader_advertiser_entity
def get_preloader_advertiser_entity_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–î–∞', callback_data=CB.REGISTER_ADVERTISER_ENTITY.value)
    kb.button(text='–ù–µ—Ç', callback_data=CB.NO_ADVERTISER.value)
    return kb.adjust(2).as_markup()


# –∫–± –¥–ª—è  register_advertiser_entity
def get_register_advertiser_entity_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ò–ü', callback_data=f'{CB.ADD_ADVERTISER.value}:{JStatus.IP.value}')
    kb.button(text='–Æ—Ä. –ª–∏—Ü–æ', callback_data=f'{CB.ADD_ADVERTISER.value}:{JStatus.JURIDICAL.value}')
    kb.button(text='–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ', callback_data=f'{CB.ADD_ADVERTISER.value}:{JStatus.PHYSICAL.value}')
    return kb.adjust(2).as_markup()


# –∫–± –¥–ª—è preloader_choose_platform
def get_preloader_choose_platform_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–î–∞', callback_data=CB.PLATFORM_START.value)
    kb.button(text='–ù–µ—Ç', callback_data=CB.NO_CHOOSE_PLATFORM.value)
    return kb.adjust(2).as_markup()


# –∫–± –¥–ª—è choose_platform
def get_choose_platform_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.VK.value}')
    kb.button(text='Instagram', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.INSTAGRAM.value}')
    kb.button(text='YouTube', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.YOUTUBE.value}')
    kb.button(text='Telegram-–∫–∞–Ω–∞–ª', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.TG_CHANNEL.value}')
    kb.button(text='–õ–∏—á–Ω—ã–π Telegram', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.TG_PERSONAL.value}')
    kb.button(text='–î—Ä—É–≥–æ–µ', callback_data=f'{CB.PLATFORM_SELECT.value}:{Platform.OTHER.value}')
    return kb.adjust(2).as_markup()


# –∫–± –¥–ª—è platform_url_collector
def get_platform_url_collector_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–î–∞, –≤–µ—Ä–Ω–æ', callback_data=f'{CB.PLATFORM_CORRECT.value}:{Action.YES.value}')
    kb.button(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'{CB.PLATFORM_CORRECT.value}:{Action.NO.value}')
    # kb.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'{CB.PLATFORM_CORRECT.value}:0')
    kb.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'{CB.CLOSE.value}')
    return kb.adjust(3).as_markup()


# –∫–± –¥–ª—è process_average_views
def get_process_average_views_kb(contractors: tuple[db.DistributorRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for contractor in contractors:
        kb.button(text=contractor.name, callback_data=f"{CB.PLATFORM_DIST.value}:{contractor.ord_id}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB.CLOSE.value)
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è finalize_platform_data
def get_finalize_platform_data_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–ª–æ—â–∞–¥–∫—É', callback_data=f'{CB.PLATFORM_FIN.value}:{Action.ADD.value}')
    kb.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'{CB.PLATFORM_FIN.value}:{Action.CONT.value}')
    return kb.adjust(2).as_markup()


# –∫–± –¥–ª—è confirm_ad_campaign
def get_confirm_ad_campaign_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data=f"{CB.CAMPAIGN_ADD_CONFIRM.value}:{Action.ADD.value}"),
    kb.button(text="üñç –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"{CB.CAMPAIGN_ADD_CONFIRM.value}:{Action.NO.value}"),
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB.CAMPAIGN_ADD_CONFIRM.value}:0"),
    # kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB.CLOSE.value}")
    return kb.adjust(3).as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É –ø—Ä–æ–º–æ
def get_select_page_kb(end_page: bool, select_id: int, page: int, cb: str = CB.CONTRACT_PAGE.value) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    btn_count = 0
    if page > 0:
        btn_count += 1
        kb.button(text=f'‚¨ÖÔ∏è –ü—Ä–µ–¥ —Å—Ç—Ä.', callback_data=f'{cb}:{page - 1}:{Action.CONT.value}')
    if not end_page:
        btn_count += 1
        kb.button(text=f'–°–ª–µ–¥ —Å—Ç—Ä. ‚û°Ô∏è ', callback_data=f'{cb}:{page + 1}:{Action.CONT.value}')

    kb.button(text=f'‚úîÔ∏è –í—ã–±—Ä–∞—Ç—å', callback_data=f'{cb}:{select_id}:{Action.YES.value}')
    kb.adjust(2, 1) if btn_count == 2 else kb.adjust(1)
    return kb.as_markup()


# –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
def get_continue_add_link_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{CB.CAMPAIGN_ADD_ANOTHER_LINK.value}:0")
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è ask_for_additional_link
def get_ask_for_additional_link_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data=f"{CB.CAMPAIGN_ADD_ANOTHER_LINK.value}:1")
    kb.button(text="–ù–µ—Ç", callback_data=f"{CB.CAMPAIGN_ADD_ANOTHER_LINK.value}:0")
    return kb.adjust(2).as_markup()


# –∫–± –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
def get_select_campaigns_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(
        text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        callback_data=f"{CB.CREATIVE_SELECT_CAMPAIGN.value}:0:{ Action.CONT.value}"
    )
    return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è add_creative
# def get_add_creative_kb(campaigns: tuple[db.CampaignRow]) -> InlineKeyboardMarkup:
#     kb = InlineKeyboardBuilder()
#     for campaign in campaigns:
#         # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏
#         kb.button(
#             text=f"{campaign.brand} - {campaign.service}",
#             callback_data=f"{CB.CREATIVE_SELECT_CAMPAIGN.value}:{campaign.id}")
#     return kb.adjust(1).as_markup()


# –∫–± –¥–ª—è generate_link
def get_end_creative_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥—É—é –ø–ª–æ—â–∞–¥–∫—É", callback_data=CB.CREATIVE_ADD_LINK.value)
    kb.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=CB.CREATIVE_DONE.value)
    return kb.adjust(1).as_markup()


# –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
def get_select_card_kb(save_cards: tuple[db.SaveCardRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π", callback_data=f"{CB.PAY_YK_NEW.value}:{1}")
    for card in save_cards:
        kb.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {card.card_info}", callback_data=f"{CB.PAY_YK_FAST.value}:{card.id}")

    # markup.add(kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_creative_:{pay_id}:{campaign_id}"))
    return kb.adjust(1).as_markup()


# –∫–± —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ —é–∫–∞—Å—Å–µ
# def get_yk_pay_kb(pay_id: str, campaign_id: str, save_cards: tuple) -> InlineKeyboardMarkup:
def get_yk_pay_kb(pay_id: str, save_card: bool) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    checkbox = '‚úîÔ∏è ' if save_card else ''
    edit_save_card = 0 if save_card else 1
    kb.button(text=f"{checkbox} –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"{CB.PAY_YK_NEW.value}:{int(not save_card)}")
    kb.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å 400 —Ä.", url=Config.pay_link.format(payment_id=pay_id))
    kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"{CB.PAY_YK_CHECK.value}:{pay_id}")
    return kb.adjust(1).as_markup()


def get_contract_end_kb(dist_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data=f"{CB.CONTRACT_END.value}")
    kb.button(text="üñç –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"{CB.CONTRACT_DIST_SELECT.value}:{dist_id}")
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB.CONTRACT_BACK.value}")
    return kb.adjust(3).as_markup()


# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∞
def get_check_next_step_contract_kb(step: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data=f'add_contract_next_step_check:{step}:1'),
    kb.button(text="–ù–µ—Ç", callback_data=f'add_contract_next_step_check:{step}:0')
    return kb.adjust(1).as_markup()


# –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def get_add_distributor_finish_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', callback_data=CB.ADD_ANOTHER_DISTRIBUTOR.value)
    kb.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=CB.CONTINUE.value)
    return kb.adjust(2).as_markup()


# –≤—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def get_select_distributor_kb(contractors: tuple[db.DistributorRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for contractor in contractors:
        kb.button(text=contractor.name, callback_data=f"{CB.CONTRACT_DIST_SELECT.value}:{contractor.id}")

    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB.CLOSE.value)
    return kb.adjust(1).as_markup()


# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∞
def get_close_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB.CLOSE.value)
    return kb.adjust(1).as_markup()
